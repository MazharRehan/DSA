// Task 4: Convert MaxHeap to MinHeap

#include <iostream>
using namespace std;

// Function to maintain the max heap property
void maxHeapify(int arr[], int n, int i)
{
    int largest = i;                // Initialize the largest as the root
    int left = 2 * i + 1;           // Left child index
    int right = 2 * i + 2;          // Right child index

    // Check if the left child is larger than the root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // Check if the right child is larger than the current largest
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If the largest is not the root, swap the largest with the root
    if (largest != i) {
        swap(arr[i], arr[largest]);

        // Recursively call maxHeapify on the affected subtree
        maxHeapify(arr, n, largest);
    }
}


// min heapify function
void minHeapify(int arr[], int size, int i)
{
	// find left and right child of current node
	// note that right child is not needed if heap size is odd
	int left = 2 * i + 1;
	int right = 2 * i + 2;

	int smallest = i;

	// compare arr[index] with its left and right child
	// and find smallest value
	if (left < size && arr[left] < arr[i])
		smallest = left;

	if (right < size && arr[right] < arr[smallest])
		smallest = right;

	// swap with child having lesser value and
	// call heapify-down on the child
    if (smallest != i)
    {
		swap(arr[i], arr[smallest]);
		minHeapify(arr, size, smallest);
	}
}

// function to convert MaxHeap to MinHeap
void convertToMinHeap(int arr[], int size)
{
    // Build MaxHeap
    maxHeapify(arr, size, 0);

    // Convert MaxHeap to MinHeap
    minHeapify(arr, size, 0);
}

void printArray(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main()
{
    int arr[] = { 9, 7, 6, 5, 3, 1 };
    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "MaxHeap array: ";
    printArray(arr, size);

    convertToMinHeap(arr, size);

    cout << "MinHeap array: ";
    printArray(arr, size);

    return 0;
}
